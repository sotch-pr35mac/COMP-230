First Things First: www.cs.kzoo.edu/cs230

Virtual Machine
	Andrew Tenenbaum's definition. 
    Not today's definition of virtual machine.
    What is the machine they are interacting with when they use a computer, the machine in their mind that they are working with is defined by the GUI of what they are using. 
    	GUI is part of some user application. 
        	That user interface is written in a programming language such as Java. Chances are that large chunks of the operating system is written in C.
            When a Java program gets compiled it gets complied into an equivalent version of itself in Java Byte Code. 
            	The Java Byte Code cannot be run by the machine itself, it has to be run by some Java Virtual Machine (today's definition of that word) (JVM). 
			The Java Virtual Machine is built on some language that can be run in Machine Language.
            When a C program gets compiled it get compiled down into an equivalent version in Machine Language.
	    At the bottom of all of this is all of the actual wires, switches and current. 
		So what does all of this do? 
			1. It stores data: integers, floating point, machine language instructions
				Chances are most encoding (of really any data type) is integers. sometimes its floating point, but mostly its just always integers
				For the purposes of this class: it is smart to consider machine language instructions as a separate data type, even though it is encoded as integers or floating point
				What makes a computer a computer is that it can store machine language instruction, and that you can change what it does, thats how it separates a computer from any other electronic device. 
				The only thing a computer knows what to do, it runs Machine Language Programs. Thats it. If you want to write a program in a higher level language, you will have to compile it down to Machine language.
					The way the the machine language works, is that it needs to fetch the next instruction, evaluate it, figure out what kind of instruction it is (like what does it want us to do), and then execute it. 

A big part of this course we are going to concentrate a lot of our time on the hardware (a simplified version of the hardware), and the simple building blocks that modern engineers 
	Modern design gives us VLSI, (Very Large Scale Integrated Circuits)
	What we are going to look at is VSSI (Very Small Scale Integrated Circuits) - the building blocks of the machines and computers
	We are going to have to understand Machine Language as well if we really want to understand whats going on.
		This means that we could write programs in Assembly Languages (which is a very low-level language), and how it is different from Machine Language
Assembly is a 1:1 correspondance between machine language's 0's and 1's that have a command and a phuenomic command for the same action

Complilation Process for C
	Preprocessor --> Compiler --> Assembler; Loader
	include.h can link to different function declarations, such as file.c, file2.c, and file3.c
	What is the difference #include <stdio.h> and #include "myHeader.h"
		<> is used for system libraries, "" is for things we've declaired in the current directory
	Everything with a # sign willl be handled by the preprocessor, and not even be seen by the compiler, the preprocessor puts everything in the include into the actual file itself for the compiler to handle easier
	You can actually include a lot of things
		#ifndef MYHEADER
		#define MYHEADER
		#include MYHEADER
	The Loader does 2 thing, it loads them together, and resolves unresolved global references

C: Simple Differences and Implications
	All declarations @ the top of blocks
	Use the standard C, because if you don't and even though your compiler allows it, it might have some troubles with cross-compatability
	Types that C does not have:
		-It does not have a boolean type (you can just go ahead and use an integer 0 and 1 for false and true respectively)
		-No Classes (not a bad thing...)
		-Underscores are allowed, dashes or not, cannot use a digit as the first character in a variable name.
		-Anything other than 0 will be evaluated as true
		-C can have expressions that are statements
			-Expressions evaluate to something, and statements that change the state of something or change something in memory.
			-<code>y=3</code> will evaluate to true, always
			-<code>y=0</code> wille valuate to false.
	No classes
		Classes: Encapsulation
			 Abstraction
			 1st First Order
		Here are some of the implications of this:
			==> functions are global
			==> struct, typedef
			==> No String class

Here is some interesting shit about the implications of no classes:
	struct:
		struct {
			char *label;
			int address;
		}
		struct {
			int x;
			int y;
		}

	Less Prefered Method for doing structs in C:
		struct Point_tag {
			int x;
			int y;
		}
		struct Point_tag p1;
		struct Point_tag p2;

	More prefered way of doing all of this:
		typedef struct {
			char *label;
			int address;
		} LabelEntry;

		LabelEntry entry1;

		typedef int boolean;

	So structs give us a little more or less of what is in java with classes.

C Design
	Object Oriented Design are closes related, so like you can have an object oriented design but implement it with a non object oriented lanuage
	So in C we have what is called Structured Design, (with structs, not with objects) (a procedural paradigm)

	distinction between declarations and definitions.
		Variable (associations):
			-Name
			-Type
			-Size / Layout
			-Address (temp or final)
		Declaration:
			-Name
			-Type
			-Size / Layout
		Definition:
			-Declaration
			-Memory Allocation and knowing where it is going to be

		Declaration is also called a Prototype (sound like anything familiar ;-)
		So a declaration is like C's and JavaScript's Prototype, and is like Java's Interface, it only have declarations, so it only has a type and name and layout
		Declarations are found in C's header files, and you wouldn't want a definition there, and you want it outside the outside the function definitions.

		So when we are talking about declarations, lets look at two examples here:
			Java
				int i; ==> creates a type, name, and size.
				Fish f = new Fish(); ==> creates a reference to the address to memory of where the information is stored. (we have this idea in C also we call it pointer, however, we don't have a "new" pointer in C so we have to figure out a way to dynamically allocate memory like this)
			Moral of the story here is that the whole mind set is different when in Java and in C and just shit in general is a lot different

	In C there are no class variables (in Java its called a static variable) and there are no instance variables, but there is such a thing as a global variable (which there really isn't in Java)
	When you want to share a variable accross several functions, then you make it a global variable

	More on Sturctured Design
		We take a look at the verbs and action words in the verbal description, instead of how we take a look at all the nouns and objects when we are doing object oriented programming
		We can take a look at a strucutre chart here: http://www.cs.kzoo.edu/cs230/lectures/StructuredDesign/ExampleStructChart.pdf

C (Strings and Pointers)
	So, C has no `string` type. There is one tiny way that that is a lie. 
		There is, however, a string constant, which may be confusing at first but hold in there.
	When trying to figure out how to use strings in C, we have to think about what a string is really.
		A `string` is more or less of `chars`
		It is assumed that a `string` that is an `array` of `chars` has one null byte at the end of it.
			For example of this: `
				char preston[8];
				preston[0] = 'p';
				preston[1] = 'r';
				preston[2] = 'e';
				preston[3] = 's';
				preston[4] = 't';
				preston[5] = 'o';
				preston[6] = 'n';
				preston[7] = '\0'; ==> null byte
		When we pass a string in C using something like strlen to get the length of a string what it does is it gives the location of the first value in the string that is followed by the other values in that string

	So fun fact: Java's .compareTo() method evolved from C's strcmp()

	Don't forget to include #include<string.h>

	Let's take a look at a bit of code right here:
		if(strcmp(string1, string2) == 0) {
			...
		} ==> This will actually not work, this inside of the if will run only when the two strings aren't the same, so the way you get this to work is like this:
		if(!strcmp(string1, string2)) {
			...
		} ==> This will work, however it looks super confusing and it just bad practice, so lets do a little work around to make it better;
		int SAME = 0;
		if(strcmp(string1, string2) == SAME) {
			...
		} ==> See, thats a little better than before, still not great, but its the best we've got

	
	char * studentp; ==> when you use the `char *` it uses a pointer to memeory
	studentp = student;
	char student[20] = "William" <===> char alyce[6]; 

Pointers

	*Note: The address of i is 1000

	int i = 5;
	int *ip;
	ip = &i;
	
	i ==> 5
	ip ==> 1000
	&i ==> 1000
	*ip ==> 5


