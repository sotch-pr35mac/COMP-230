1.
	R-Type (Register)
		Format: opcode: 31-26 bits, register $zero: 25-21 bits, register $s0: 20-16 bits, register $t0: 15-11 bits, shift amount: 10-6bits, function: 5-0 bits
		Binary: 000000 00000 10000 01000 00000 100000
		Decimal: 0 0 16 8 0 32
 	I-Type (Immediate)
		Format; opcode: 31-26 bits, register $s0: 25-21 bits, register $s1: 20-16 bits, immediate: 15-0 bits
		Binary: 000100 10000 10111 ENDIF
		Decimal: 4 16 23 ENDIF
	R-Type
		Binary: 000000 01000 10001 01000 00000 100000
		Decimal: 0 8 17 8 0 32
	R-Type
		Binary: 000000 00000 01000 01000 00001 000010
		Decimal: 0 0 8 8 1 2
	R-Type
		Binary: 000000 01000 10000 01000 00000 100000
		Decimal: 0 8 16 8 0 32

2. 
	Yes, the two are equivalent. 

		.data
	mask: 	.word 0x0000ffff
		.text
	start: 	lw 	$t0, mask	## load from source mask into register t0
		lw	$t1, store	## load from source store into register t1
		and	$s2, $s2, $t0	## $s2 = $t0 & $s2
		or	$t1, $t1, $s2 	## $t1 = $s2 | $t1
		sw	$t1, store	## store $t1 in destination store in memory
	store:  sw	$s0, 0($s1)	## store $s0 in destination 0($s1) in memory

	The code loads mask into register t0, and then loads store into t1. It then takes the logical (bitwise) and of registers t0 and s2 and sets that equal to s2. Then it takes the logical (bitwise) or from s2 and t1 and sets that equal to t1. 
	The reason its a bad idea now-a-days is because if the next instruction is already in the pre-queue then the 'correct' instruction won't get executed and that can cause issues with the program.

3. 
		.data
		c:	.word 3, 4, 5, 7
		.text
	main: 	li $t2, 0	
		li $t0, 10		
		li $t1, 0
	loop:	beq $t1, $t0, end
		add $t1, 8, $t4				
		lw $t5, $t4(c)
		add $t2, $t5, $t2
		addi $t1, $t1, 1
		j loop
	end: syscall
