Computer Organization (CS230) Homework 4 | Preston Stosur-Bassett

1. Calculate teh following sums in hexadecimal and binary. Assume the numbers represent 8-bit unsigned integers. Circle any result that has overflow. Note whether the hex and binary sums represent the same number.

	1a. 
		Hex: 0x46 + 0x74 = BA
		Binary: 01000110 + 01110100 = 10111010
		BA(hex) == 10111010(bin)
	1b.
		Hex: 0x46 + 0xE9 = 12F
		Binary: 01000110 + 11101001 = 100101111 (OVERFLOW)
		100101111(bin) == 12F(hex)
	1c. 
		Hex: 0x87 + 0x74 = FB
		Binary: 10000111 + 01110100 = 11111011
		11111011(bin) == FB(hex)
	1d. 
		Hex: 0x87 + 0xE9 = 170
		Binary: 10000111 + 11101001 = 101110000 (OVERFLOW)
		101110000(bin) == 170(hex)

2. For the 4 numbers above (0x46, 0x74, 0x87, 0xE9):
	
	2a. Look at the binary representations and determine which represent different numbers when considered as 8-bit two's complement signed integers rather than unsigned integers? (How do you recognize them?)

		0xE9 represented in binary could be considered as a negative value in binary, you can tell because of the first bit, 1, which in 2's complement is considered as a 'negative sign'.
	
	2b. For each of the numbers whose value is different when considered as unsigned vs. 2's complement, calculate both decimal values.
		
		0xE9(hex) == 11101001(usigned binary) == 233(dec)
		0xE9(hex) == 11101001(signed binary) == -23
		0x87(hex) == 10000111(unsigned binary) == 135
		0x87(hex) == 10000111(signed binary) == -121
	
	2c. Which of the calculations above involved numberrs whose values depend on whether they represent unsigned or 2's complement numbers? Would you expect the result of the sums to be different if the numbers were treated as 2's complement?

		I would expect the values to be much different if they were treated as signed 2's complement. All the results from problem 1 can be interpreted as negative values in signed 2's complement binary, as well as the operands 0x87 and 0xE9.

3. For all of the sums above that would be different if calculated as 2's complement signed integers, re-calculate assuming that notation. (You may do this in binary or hexadecimal.) When does overflow occur? Is this the same problem in (1) above? Why or why not?

	0x46 + 0xE9 = 00101111(bin) (OVERFLOW)
	0x87 + 0x74 = 01110100(bin) (OVERFLOW)
	0x87 + 0xE9 = 11101001(bin) (OVERFLOW)

4. Recalculate 1b using subtraction, treating 0x46 and 0xE9 as 2's complement binary integers. In other words, calculate 0x46 - (-0xE9), in binary. Then do the same calculation in hex. Both answers should match your answer in 1b. 

	01000110 - (11101001) = 100101111

5. What is the decimal value for 0x24A60004 if it represents an unsigned integer?

	0x24A6000(hex) == 614858756(dec)

6. What is the decimal value for 0x24A60004 if it represents a two's complement integer?

	3680108540(dec)

PART B:

1. What is the floating point decimal value for 0x24A60004 if it represnts a 32-bit floating point number?

	7.19 * 10 ^-17

2. What is the binary 32-bit floating point representation for -1609.5?

	11000100110010010011000000000000

3. What is the 64-bit floating point representation for the same number?

	1100000010011001001001100000000000000000000000000000000000000000

PART C:

1. What MIPS instruction is represented by the 32-bit number 0x24A60004?
	addiu $a1, $a2, 4
